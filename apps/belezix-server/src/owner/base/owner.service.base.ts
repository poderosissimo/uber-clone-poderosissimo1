/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  Owner as PrismaOwner,
  Users as PrismaUsers,
} from "@prisma/client";

export class OwnerServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.OwnerCountArgs, "select">): Promise<number> {
    return this.prisma.owner.count(args);
  }

  async owners<T extends Prisma.OwnerFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.OwnerFindManyArgs>
  ): Promise<PrismaOwner[]> {
    return this.prisma.owner.findMany<Prisma.OwnerFindManyArgs>(args);
  }
  async owner<T extends Prisma.OwnerFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.OwnerFindUniqueArgs>
  ): Promise<PrismaOwner | null> {
    return this.prisma.owner.findUnique(args);
  }
  async createOwner<T extends Prisma.OwnerCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.OwnerCreateArgs>
  ): Promise<PrismaOwner> {
    return this.prisma.owner.create<T>(args);
  }
  async updateOwner<T extends Prisma.OwnerUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.OwnerUpdateArgs>
  ): Promise<PrismaOwner> {
    return this.prisma.owner.update<T>(args);
  }
  async deleteOwner<T extends Prisma.OwnerDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.OwnerDeleteArgs>
  ): Promise<PrismaOwner> {
    return this.prisma.owner.delete(args);
  }

  async findUsersItems(
    parentId: string,
    args: Prisma.UsersFindManyArgs
  ): Promise<PrismaUsers[]> {
    return this.prisma.owner
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .usersItems(args);
  }
}
