/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  Users as PrismaUsers,
  Client as PrismaClient,
  Owner as PrismaOwner,
} from "@prisma/client";

export class UsersServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.UsersCountArgs, "select">): Promise<number> {
    return this.prisma.users.count(args);
  }

  async usersItems<T extends Prisma.UsersFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.UsersFindManyArgs>
  ): Promise<PrismaUsers[]> {
    return this.prisma.users.findMany<Prisma.UsersFindManyArgs>(args);
  }
  async users<T extends Prisma.UsersFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.UsersFindUniqueArgs>
  ): Promise<PrismaUsers | null> {
    return this.prisma.users.findUnique(args);
  }
  async createUsers<T extends Prisma.UsersCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.UsersCreateArgs>
  ): Promise<PrismaUsers> {
    return this.prisma.users.create<T>(args);
  }
  async updateUsers<T extends Prisma.UsersUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.UsersUpdateArgs>
  ): Promise<PrismaUsers> {
    return this.prisma.users.update<T>(args);
  }
  async deleteUsers<T extends Prisma.UsersDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.UsersDeleteArgs>
  ): Promise<PrismaUsers> {
    return this.prisma.users.delete(args);
  }

  async getClient(parentId: string): Promise<PrismaClient | null> {
    return this.prisma.users
      .findUnique({
        where: { id: parentId },
      })
      .client();
  }

  async getOwner(parentId: string): Promise<PrismaOwner | null> {
    return this.prisma.users
      .findUnique({
        where: { id: parentId },
      })
      .owner();
  }
}
