/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { UsersService } from "../users.service";
import { UsersCreateInput } from "./UsersCreateInput";
import { Users } from "./Users";
import { Request } from "../../request/base/Request";
import { UsersFindManyArgs } from "./UsersFindManyArgs";
import { UsersWhereUniqueInput } from "./UsersWhereUniqueInput";
import { UsersUpdateInput } from "./UsersUpdateInput";

export class UsersControllerBase {
  constructor(protected readonly service: UsersService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Users })
  async createUsers(@common.Body() data: UsersCreateInput): Promise<Users> {
    return await this.service.createUsers({
      data: {
        ...data,

        client: data.client
          ? {
              connect: data.client,
            }
          : undefined,

        owner: data.owner
          ? {
              connect: data.owner,
            }
          : undefined,
      },
      select: {
        active: true,
        address: true,
        addressComplement: true,
        addresses: true,
        appointmentsTotal: true,
        cardId: true,
        cash: true,
        cheque: true,
        city: true,

        client: {
          select: {
            id: true,
          },
        },

        cnpj: true,
        complement: true,
        confirmedEmail: true,
        coord: true,
        cpf: true,
        createdAt: true,
        createdById: true,
        creditcard: true,
        debitcard: true,
        distance: true,
        email: true,
        firstName: true,
        globalId: true,
        id: true,
        isActive: true,
        isCash: true,
        isCheque: true,
        isConfirmedEmail: true,
        isCreditCard: true,
        isDebitCard: true,
        isPix: true,
        isSendedEmail: true,
        isTransferBank: true,
        lastName: true,
        locationCoord: true,
        myOwnerId: true,
        name: true,
        nextPlan: true,

        owner: {
          select: {
            id: true,
          },
        },

        password: true,
        payDay: true,
        paymentDay: true,
        phone: true,
        photoId: true,
        photoUrl: true,
        pix: true,
        plan: true,
        profilePhotoUrl: true,
        role: true,
        sendedEmail: true,
        serviceIds: true,
        serviceOptions: true,
        totalAppointments: true,
        transferbank: true,
        travelDistance: true,
        uf: true,
        updatedAt: true,
        userAddress: true,
        userAddresses: true,
        userCardId: true,
        userCity: true,
        userClientId: true,
        userCnpj: true,
        userCpf: true,
        userEmail: true,
        userGlobalId: true,
        userMyOwnerId: true,
        userNextPlan: true,
        userOwnerId: true,
        userPassword: true,
        userPhone: true,
        userPhotoId: true,
        userPlan: true,
        userRole: true,
        userServiceOptions: true,
        userUf: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Users] })
  @ApiNestedQuery(UsersFindManyArgs)
  async usersItems(@common.Req() request: Request): Promise<Users[]> {
    const args = plainToClass(UsersFindManyArgs, request.query);
    return this.service.usersItems({
      ...args,
      select: {
        active: true,
        address: true,
        addressComplement: true,
        addresses: true,
        appointmentsTotal: true,
        cardId: true,
        cash: true,
        cheque: true,
        city: true,

        client: {
          select: {
            id: true,
          },
        },

        cnpj: true,
        complement: true,
        confirmedEmail: true,
        coord: true,
        cpf: true,
        createdAt: true,
        createdById: true,
        creditcard: true,
        debitcard: true,
        distance: true,
        email: true,
        firstName: true,
        globalId: true,
        id: true,
        isActive: true,
        isCash: true,
        isCheque: true,
        isConfirmedEmail: true,
        isCreditCard: true,
        isDebitCard: true,
        isPix: true,
        isSendedEmail: true,
        isTransferBank: true,
        lastName: true,
        locationCoord: true,
        myOwnerId: true,
        name: true,
        nextPlan: true,

        owner: {
          select: {
            id: true,
          },
        },

        password: true,
        payDay: true,
        paymentDay: true,
        phone: true,
        photoId: true,
        photoUrl: true,
        pix: true,
        plan: true,
        profilePhotoUrl: true,
        role: true,
        sendedEmail: true,
        serviceIds: true,
        serviceOptions: true,
        totalAppointments: true,
        transferbank: true,
        travelDistance: true,
        uf: true,
        updatedAt: true,
        userAddress: true,
        userAddresses: true,
        userCardId: true,
        userCity: true,
        userClientId: true,
        userCnpj: true,
        userCpf: true,
        userEmail: true,
        userGlobalId: true,
        userMyOwnerId: true,
        userNextPlan: true,
        userOwnerId: true,
        userPassword: true,
        userPhone: true,
        userPhotoId: true,
        userPlan: true,
        userRole: true,
        userServiceOptions: true,
        userUf: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Users })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async users(
    @common.Param() params: UsersWhereUniqueInput
  ): Promise<Users | null> {
    const result = await this.service.users({
      where: params,
      select: {
        active: true,
        address: true,
        addressComplement: true,
        addresses: true,
        appointmentsTotal: true,
        cardId: true,
        cash: true,
        cheque: true,
        city: true,

        client: {
          select: {
            id: true,
          },
        },

        cnpj: true,
        complement: true,
        confirmedEmail: true,
        coord: true,
        cpf: true,
        createdAt: true,
        createdById: true,
        creditcard: true,
        debitcard: true,
        distance: true,
        email: true,
        firstName: true,
        globalId: true,
        id: true,
        isActive: true,
        isCash: true,
        isCheque: true,
        isConfirmedEmail: true,
        isCreditCard: true,
        isDebitCard: true,
        isPix: true,
        isSendedEmail: true,
        isTransferBank: true,
        lastName: true,
        locationCoord: true,
        myOwnerId: true,
        name: true,
        nextPlan: true,

        owner: {
          select: {
            id: true,
          },
        },

        password: true,
        payDay: true,
        paymentDay: true,
        phone: true,
        photoId: true,
        photoUrl: true,
        pix: true,
        plan: true,
        profilePhotoUrl: true,
        role: true,
        sendedEmail: true,
        serviceIds: true,
        serviceOptions: true,
        totalAppointments: true,
        transferbank: true,
        travelDistance: true,
        uf: true,
        updatedAt: true,
        userAddress: true,
        userAddresses: true,
        userCardId: true,
        userCity: true,
        userClientId: true,
        userCnpj: true,
        userCpf: true,
        userEmail: true,
        userGlobalId: true,
        userMyOwnerId: true,
        userNextPlan: true,
        userOwnerId: true,
        userPassword: true,
        userPhone: true,
        userPhotoId: true,
        userPlan: true,
        userRole: true,
        userServiceOptions: true,
        userUf: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Users })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateUsers(
    @common.Param() params: UsersWhereUniqueInput,
    @common.Body() data: UsersUpdateInput
  ): Promise<Users | null> {
    try {
      return await this.service.updateUsers({
        where: params,
        data: {
          ...data,

          client: data.client
            ? {
                connect: data.client,
              }
            : undefined,

          owner: data.owner
            ? {
                connect: data.owner,
              }
            : undefined,
        },
        select: {
          active: true,
          address: true,
          addressComplement: true,
          addresses: true,
          appointmentsTotal: true,
          cardId: true,
          cash: true,
          cheque: true,
          city: true,

          client: {
            select: {
              id: true,
            },
          },

          cnpj: true,
          complement: true,
          confirmedEmail: true,
          coord: true,
          cpf: true,
          createdAt: true,
          createdById: true,
          creditcard: true,
          debitcard: true,
          distance: true,
          email: true,
          firstName: true,
          globalId: true,
          id: true,
          isActive: true,
          isCash: true,
          isCheque: true,
          isConfirmedEmail: true,
          isCreditCard: true,
          isDebitCard: true,
          isPix: true,
          isSendedEmail: true,
          isTransferBank: true,
          lastName: true,
          locationCoord: true,
          myOwnerId: true,
          name: true,
          nextPlan: true,

          owner: {
            select: {
              id: true,
            },
          },

          password: true,
          payDay: true,
          paymentDay: true,
          phone: true,
          photoId: true,
          photoUrl: true,
          pix: true,
          plan: true,
          profilePhotoUrl: true,
          role: true,
          sendedEmail: true,
          serviceIds: true,
          serviceOptions: true,
          totalAppointments: true,
          transferbank: true,
          travelDistance: true,
          uf: true,
          updatedAt: true,
          userAddress: true,
          userAddresses: true,
          userCardId: true,
          userCity: true,
          userClientId: true,
          userCnpj: true,
          userCpf: true,
          userEmail: true,
          userGlobalId: true,
          userMyOwnerId: true,
          userNextPlan: true,
          userOwnerId: true,
          userPassword: true,
          userPhone: true,
          userPhotoId: true,
          userPlan: true,
          userRole: true,
          userServiceOptions: true,
          userUf: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Users })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteUsers(
    @common.Param() params: UsersWhereUniqueInput
  ): Promise<Users | null> {
    try {
      return await this.service.deleteUsers({
        where: params,
        select: {
          active: true,
          address: true,
          addressComplement: true,
          addresses: true,
          appointmentsTotal: true,
          cardId: true,
          cash: true,
          cheque: true,
          city: true,

          client: {
            select: {
              id: true,
            },
          },

          cnpj: true,
          complement: true,
          confirmedEmail: true,
          coord: true,
          cpf: true,
          createdAt: true,
          createdById: true,
          creditcard: true,
          debitcard: true,
          distance: true,
          email: true,
          firstName: true,
          globalId: true,
          id: true,
          isActive: true,
          isCash: true,
          isCheque: true,
          isConfirmedEmail: true,
          isCreditCard: true,
          isDebitCard: true,
          isPix: true,
          isSendedEmail: true,
          isTransferBank: true,
          lastName: true,
          locationCoord: true,
          myOwnerId: true,
          name: true,
          nextPlan: true,

          owner: {
            select: {
              id: true,
            },
          },

          password: true,
          payDay: true,
          paymentDay: true,
          phone: true,
          photoId: true,
          photoUrl: true,
          pix: true,
          plan: true,
          profilePhotoUrl: true,
          role: true,
          sendedEmail: true,
          serviceIds: true,
          serviceOptions: true,
          totalAppointments: true,
          transferbank: true,
          travelDistance: true,
          uf: true,
          updatedAt: true,
          userAddress: true,
          userAddresses: true,
          userCardId: true,
          userCity: true,
          userClientId: true,
          userCnpj: true,
          userCpf: true,
          userEmail: true,
          userGlobalId: true,
          userMyOwnerId: true,
          userNextPlan: true,
          userOwnerId: true,
          userPassword: true,
          userPhone: true,
          userPhotoId: true,
          userPlan: true,
          userRole: true,
          userServiceOptions: true,
          userUf: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
