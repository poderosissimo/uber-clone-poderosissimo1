/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, Rating as PrismaRating } from "@prisma/client";

export class RatingServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.RatingCountArgs, "select">): Promise<number> {
    return this.prisma.rating.count(args);
  }

  async ratings<T extends Prisma.RatingFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.RatingFindManyArgs>
  ): Promise<PrismaRating[]> {
    return this.prisma.rating.findMany<Prisma.RatingFindManyArgs>(args);
  }
  async rating<T extends Prisma.RatingFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.RatingFindUniqueArgs>
  ): Promise<PrismaRating | null> {
    return this.prisma.rating.findUnique(args);
  }
  async createRating<T extends Prisma.RatingCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.RatingCreateArgs>
  ): Promise<PrismaRating> {
    return this.prisma.rating.create<T>(args);
  }
  async updateRating<T extends Prisma.RatingUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.RatingUpdateArgs>
  ): Promise<PrismaRating> {
    return this.prisma.rating.update<T>(args);
  }
  async deleteRating<T extends Prisma.RatingDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.RatingDeleteArgs>
  ): Promise<PrismaRating> {
    return this.prisma.rating.delete(args);
  }
}
