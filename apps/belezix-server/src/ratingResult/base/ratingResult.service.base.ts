/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, RatingResult as PrismaRatingResult } from "@prisma/client";

export class RatingResultServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.RatingResultCountArgs, "select">
  ): Promise<number> {
    return this.prisma.ratingResult.count(args);
  }

  async ratingResults<T extends Prisma.RatingResultFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.RatingResultFindManyArgs>
  ): Promise<PrismaRatingResult[]> {
    return this.prisma.ratingResult.findMany<Prisma.RatingResultFindManyArgs>(
      args
    );
  }
  async ratingResult<T extends Prisma.RatingResultFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.RatingResultFindUniqueArgs>
  ): Promise<PrismaRatingResult | null> {
    return this.prisma.ratingResult.findUnique(args);
  }
  async createRatingResult<T extends Prisma.RatingResultCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.RatingResultCreateArgs>
  ): Promise<PrismaRatingResult> {
    return this.prisma.ratingResult.create<T>(args);
  }
  async updateRatingResult<T extends Prisma.RatingResultUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.RatingResultUpdateArgs>
  ): Promise<PrismaRatingResult> {
    return this.prisma.ratingResult.update<T>(args);
  }
  async deleteRatingResult<T extends Prisma.RatingResultDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.RatingResultDeleteArgs>
  ): Promise<PrismaRatingResult> {
    return this.prisma.ratingResult.delete(args);
  }
}
