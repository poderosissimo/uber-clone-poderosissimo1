/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { RatingResultService } from "../ratingResult.service";
import { RatingResultCreateInput } from "./RatingResultCreateInput";
import { RatingResult } from "./RatingResult";
import { Request } from "../../request/base/Request";
import { RatingResultFindManyArgs } from "./RatingResultFindManyArgs";
import { RatingResultWhereUniqueInput } from "./RatingResultWhereUniqueInput";
import { RatingResultUpdateInput } from "./RatingResultUpdateInput";

export class RatingResultControllerBase {
  constructor(protected readonly service: RatingResultService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: RatingResult })
  async createRatingResult(
    @common.Body() data: RatingResultCreateInput
  ): Promise<RatingResult> {
    return await this.service.createRatingResult({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [RatingResult] })
  @ApiNestedQuery(RatingResultFindManyArgs)
  async ratingResults(@common.Req() request: Request): Promise<RatingResult[]> {
    const args = plainToClass(RatingResultFindManyArgs, request.query);
    return this.service.ratingResults({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: RatingResult })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async ratingResult(
    @common.Param() params: RatingResultWhereUniqueInput
  ): Promise<RatingResult | null> {
    const result = await this.service.ratingResult({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: RatingResult })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateRatingResult(
    @common.Param() params: RatingResultWhereUniqueInput,
    @common.Body() data: RatingResultUpdateInput
  ): Promise<RatingResult | null> {
    try {
      return await this.service.updateRatingResult({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: RatingResult })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteRatingResult(
    @common.Param() params: RatingResultWhereUniqueInput
  ): Promise<RatingResult | null> {
    try {
      return await this.service.deleteRatingResult({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
